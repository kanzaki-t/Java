(前)++：先自增1，再运算
(后)++：先运算，后自增1

(前)--：先自减1，再运算
(后)--：先运算，后自减1
注意：++或--运算不会改变数据类型

连续赋值
int a = 10,b = 30

+=
int m1 = 10
m1 += 5 --->15   类似等于 m1 = m1 + 5

byte n1 = 10
n1 += 5 --->5    此时如果 n1 = n1 + 5 就会编译报错，因为int无法转换为byte，只能这么写 n1 = (int)(n1 + 5)

==   != <    >   <=   >=    instanceof
java中没有像js中的 === !==这种写法

且
&
&&
两个符号，表达的都是且的关系，只有当符号左右两边的类型值均为true时，结果才为true
执行过程：
        如果符号左边是true，则 & , && 都会执行符号右边的操作
        如果符号左边是false，则 & 会执行符号右边的操作
                            && 不会执行符号右边的操作

或
|
||

非
!

异或
^
两边的布尔值不一致时，得到true，
一致时，得到false


位运算符
<<  >>  >>>  &  |  ^  ~
左移 右移 无符号右移
1.在一定范围内，每向左移动一位，结果就在原有的基础上乘以2.对于正数，负数都适用。（二进制思路）
2.在一定范围内，每向右移动一位，结果就在原有的基础上除以2.对于正数，负数都适用。（二进制思路）

