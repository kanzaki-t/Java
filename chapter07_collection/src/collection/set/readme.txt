        子接口：Set：存储无序的，不可重复的数据
            HashSet，LinkedHashSet，TreeSet

        常用方法
            即为Collection中声明的15种方法

        发开中的使用频率，场景
            > 比较List，Map来说，Set使用频率比较少
            > 用来过滤重复数据

        HashSet
            > 底层使用的是HashMap，使用数组+单向链表+红黑树结构进行存储（jdk8）
        LinkedHashSet
            > 是HashSet的子类
            > 使用数组+单向链表+红黑树结构的基础上，又添加了一组双向链表，
                用于记录添加元素的先后顺序，即，可以按照添加元素的顺序实现遍历
                便于频繁的查询操作
        TreeSet
            > 底层使用红黑树存储
            > 可以按照添加的元素的指定的属性的大小顺序进行遍历

        无序性:
            > 不等于随机性，不会每次遍历的顺序都不一样
            > 添加元素的顺序和遍历元素的顺序不一致，并不是无序性
            > 根据添加的元素的哈希值，计算的其在数组中的存储位置，此位置不是依次排列的，表现为无序性

        不可重复性：
            > 添加到Set中的元素是不能相同的
            > 比较的标准，需要判断hashCode()得到的哈希值与equals()得到的结果
                哈希值相同，且equals()返回true，则认为元素相同

        添加到HashSet/LinkedHashSet中元素的要求
            要求元素所在的类要重写两个方法：equals() ，hashCode()
            同时，要求要保持一致性，我们只需要在IDEA中自动生成两个方法的重写即可。

        添加到TreeSet中元素的要求
            要求添加的元素必须是同一个类型的对象，否则会报错
            判断是否是同样的元素不再是equals() ，hashCode() 这两个方法了，
                所以这两个方法不用再重写了