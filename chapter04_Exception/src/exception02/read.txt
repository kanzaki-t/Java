- java异常处理的方式
    1. try-catch-finally
        1.程序在执行的过程中，一旦出现异常，就会在出现异常的代码处，生成对应异常类的对象，并将此对象抛出。
            一旦抛出，此程序就不执行其后的代码了

        2.针对于过程1中抛出的异常对象，进行捕获处理。
            一旦将异常进行了处理，代码就可以继续执行。

        基本结构：
            try{
                ...//可能产生异常的代码
            }
            catch( 异常类型1 e ){
                ...//当产生异常类型1异常时的处理
            }
            catch( 异常类型2 e ){
                ...//当产生异常类型2异常时的处理
            }
            finally{
                ...//无论是否发生异常，都无条件执行的语句
            }

        使用细节：
            将可能出现异常的代码声明在try语句中，一旦代码出现异常，就会在出现异常的代码处，生成对应异常类的对象，并将此对象抛出。
            针对于try中抛出的异常类的对象，使用try之后的catch语句进行匹配。一旦匹配上，就进入catch语句块进行处理。
            一旦处理结束，代码就可以继续向下执行。
            如果声明了多个catch结构，不同的异常类型在不存在子父类关系的情况下，谁声明在上面或者下面都可以。
            如果多个异常类型满足子父类的关系，则必须将子类声明在父类结构的上面，否则编译报错。

        catch中异常处理的方式：
            1.自己编写输出的语句
            2.printStackTrace() ---> 打印异常的详细信息   （推荐）
            3.getMessage() ---> 获取发生异常的原因

        try中声明的变量，出了try结构之后，就不可以进行调用了。

        开发体会：
            1.对于运行时的异常：
                开发中，通常就不进行显示的处理了。
                一旦在程序执行中，出现了运行时的异常，那么就根据异常的提示信息修改代码即可。

            2.对于编译时的异常：
                一定要进行处理，否则编译不通过。

        finally的使用说明：
            我们将一定要被执行的代码声明在finally结构中
            更深刻的理解：
                无论try中或catch中是否存在仍未被处理的异常，或者是否存在return语句等，
                finally中声明的语句都一定要被执行

            什么样的代码需要声明在finally中：
                我们在开发中，有一些资源，比如：输入流，输出流，数据库连接，socket连接等，
                在使用完之后，必须显示的进行关闭操作，否则，GC不会自动的回收这些资源。进而导致内存泄露。
                为了保证这些资源在使用完以后，不管是否出现了未被处理的异常的情况下，这些资源能被关闭，
                我们必须将这些操作声明在finally中

    2. throws + 异常类型
        格式：在方法的声明处，使用 throws 异常类型1，异常类型2...
        public void test() throws 异常类型1，异常类型2...{

        }

    开发中，如何选择异常处理的两种方式？
        资源一定要被执行，重写：try-catch-finally
        方法a中依次调用了bcd方法，方法bcd之间是递进关系。此时方法bcd中有异常，我们通常
        选择使用throws，而方法a中通常选择使用try-catch-finally统一处理

    3. throw 手动抛出异常
        格式：throw new 异常类的对象


